openapi: 3.0.3
info:
  title: Supabase Edge Functions API
  version: 0.1.0
  description: Server-side endpoints for metrics, jobs listing, workers, artifacts, and DLQ operations
servers:
  - url: https://{projectRef}.supabase.co
    variables:
      projectRef:
        default: cjvgmyotqxfpxpvmwxfv
security:
  - apiKey: []
  - bearer: []
paths:
  /functions/v1/research-enqueue:
    post:
      summary: Enqueue a research job
      description: Accepts a research job and returns 202 with the job id. Requires Bearer auth and apikey.
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          required: false
          description: Optional idempotency key (may also be provided in body)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResearchEnqueueRequest'
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  accepted: { type: boolean }
                  jobId: { type: string, format: uuid }
                  status: { type: string, example: queued }
                  idempotency_key: { type: string }
                  trace_id: { type: string }
        '401': { description: Unauthorized }
        '500': { description: Internal error }

  /functions/v1/indexing-enqueue:
    post:
      summary: Enqueue an indexing job
      description: Accepts a list of files and optional resume cursor for incremental indexing. Returns 202 with job id.
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    files: { type: array, items: { type: string } }
                    resume: { type: object, additionalProperties: true }
                idempotency_key: { type: string }
                trace_id: { type: string }
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  jobId: { type: string, format: uuid }
        '401': { description: Unauthorized }
        '500': { description: Internal error }

  /functions/v1/build-enqueue:
    post:
      summary: Enqueue a build job
      description: Enqueues a build/compile job with resource limits and timeout.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    timeout_ms: { type: integer, minimum: 1000 }
                    cpu_limit: { type: number }
                    mem_limit_mb: { type: integer }
                idempotency_key: { type: string }
                trace_id: { type: string }
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  jobId: { type: string, format: uuid }
        '401': { description: Unauthorized }
        '500': { description: Internal error }

  /functions/v1/execute-enqueue:
    post:
      summary: Enqueue an execute job
      description: Enqueues an action execution with permission/rate-limit/idempotency enforced server-side.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  type: object
                  properties:
                    action: { type: string }
                    actor: { type: string }
                    idempotency_key: { type: string }
                idempotency_key: { type: string }
                trace_id: { type: string }
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  jobId: { type: string, format: uuid }
        '401': { description: Unauthorized }
        '500': { description: Internal error }

  /functions/v1/job-status:
    get:
      summary: Get job status by id
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  job:
                    type: object
                    properties:
                      id: { type: string }
                      status: { type: string, enum: [queued, started, succeeded, failed] }
                      result: { type: object, nullable: true }
        '404': { description: Not found }
        '401': { description: Unauthorized }

  /functions/v1/job-events:
    get:
      summary: Stream job events (SSE)
      description: |
        Streams job events as Server-Sent Events. Events include: meta, progress, done, ping, idle.
        Supports reconnection via id (query) plus Last-Event-ID header or last_event_ts query.
      parameters:
        - in: query
          name: id
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: trace_id
          required: false
          schema: { type: string }
        - in: query
          name: idle_close_ms
          required: false
          schema: { type: integer, minimum: 1000 }
          description: Auto-close the stream after idle period (ms)
        - in: query
          name: max_ms
          required: false
          schema: { type: integer, minimum: 1000 }
          description: Max stream lifetime in ms
        - in: query
          name: last_event_ts
          required: false
          schema: { type: string, format: date-time }
          description: Resume cursor from this ISO timestamp
        - in: header
          name: Last-Event-ID
          required: false
          schema: { type: string }
          description: Alternative to last_event_ts; resume from this id (ISO ts)
        - in: header
          name: x-ts
          required: false
          schema: { type: string }
          description: Optional timestamp used for HMAC signature (if EDGE_REQUIRE_HMAC=true)
        - in: header
          name: x-signature
          required: false
          schema: { type: string }
          description: Optional hex HMAC of `${x-ts}:{path+query}` using EDGE_HMAC_SECRET when EDGE_REQUIRE_HMAC=true
      responses:
        '200':
          description: text/event-stream
          headers:
            Cache-Control:
              schema: { type: string }
            X-Accel-Buffering:
              schema: { type: string }
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                id: 2025-08-24T07:00:00.000Z\n
                event: meta\n
                data: {"envelope_version":"v1","job_id":"<uuid>","ts":1699999999}\n
                \n
                event: progress\n
                data: {"pct":50}\n
                \n
                event: done\n
                data: {"status":"succeeded","ts":1699999999}\n
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /functions/v1/chat:
    post:
      summary: Chat completion over SSE
      description: Streams chat deltas as Server-Sent Events. Requires Bearer auth and session-scoped access.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                event: ready\n
                event: chat.delta\n
                event: chat.done\n
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '429': { description: Rate limited }
        '500': { description: Internal error }

  /functions/v1/embed:
    post:
      summary: Embedding job over SSE
      description: |
        Streams embedding job progress as SSE and upserts vectors into pgvector. Requires Bearer auth.
        Provider is OpenAI-compatible ONLY. Configure via environment:
          - EMBEDDING_API_BASE (e.g., https://api.deepinfra.com/v1/openai)
          - EMBEDDING_MODEL_DEFAULT (e.g., BAAI/bge-m3)
          - EMBEDDING_API_KEY (provider token)
        Notes:
          - DeepInfra requires encoding_format: "float"; Edge auto-adds this when API base matches DeepInfra.
          - Do NOT use provider-specific tokens (e.g., HUGGINGFACE_API_TOKEN) in this project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbedRequest'
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                event: ready\n
                event: embed.status\n
                event: embed.done\n
        '400': { description: Bad request }
        '401': { description: Unauthorized }
        '500': { description: Internal error }
  /functions/v1/figma-compat/uui/presign:
    post:
      summary: Presign an upload URL for large Figma JSON
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId: { type: string }
                fileName: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  bucket: { type: string }
                  key: { type: string }
                  signedUrl: { type: string, nullable: true }
                  token: { type: string, nullable: true }
        '500':
          description: Internal error
  /functions/v1/figma-compat/uui/ingest:
    post:
      summary: Enqueue async ingest job from Storage key
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
          required: false
          description: Optional idempotency key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ projectId, storage_key ]
              properties:
                projectId: { type: string }
                storage_key: { type: string }
                sha256: { type: string, nullable: true }
                size: { type: integer, nullable: true }
      responses:
  /functions/v1/figma-compat/uui/generate:
    post:
      summary: Generate UUI/COGO JSON from prompt (deterministic demo)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId: { type: string }
                cogoProjectId: { type: string }
                prompt: { type: string }
                page_id: { type: integer }
                page_name: { type: string }
                variables: { type: object }
                cogo_ui_json: { type: object }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  trace_id: { type: string }
                  result:
                    type: object
                    properties:
                      uui_json: { type: object }
                      cogo_ui_json: { type: object }
        '400': { description: Invalid params }
        '500': { description: Internal error }
  /functions/v1/figma-compat/uui/generate/llm:
    post:
      summary: Generate UUI/COGO JSON from prompt (LLM-backed)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId: { type: string }
                cogoProjectId: { type: string }
                prompt: { type: string }
                page_id: { type: integer }
                page_name: { type: string }
                variables: { type: object }
                cogo_ui_json: { type: object }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  trace_id: { type: string }
                  result:
                    type: object
                    properties:
                      uui_json: { type: object }
                      cogo_ui_json: { type: object }
        '400': { description: Invalid params }
        '500': { description: Internal error }
  /functions/v1/chat-gateway:
    post:
      summary: Chat gateway (forwards to /chat)
      description: Ingress endpoint that forwards requests to /functions/v1/chat and streams SSE. Use /chat directly where possible.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: SSE stream started
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                event: ready\n
                event: chat.delta\n
                event: chat.done\n
        '502': { description: Upstream error }
  /functions/v1/metrics-overview:
    get:
      summary: Metrics overview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  counts:
                    type: object
                    additionalProperties:
                      type: integer
                  latest:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  ts:
                    type: string
                    format: date-time
              example:
                ok: true
                counts: { queued: 13, assigned: 3, running: 0, succeeded: 26, failed: 5 }
                latest:
                  - id: 11111111-1111-1111-1111-111111111111
                    type: browser.run
                    status: failed
                    executor_id: verify-demo
                    created_at: '2025-08-09T12:21:54.511721+00:00'
                ts: '2025-08-09T12:29:28.478Z'

  /functions/v1/jobs-recent:
    get:
      summary: List recent jobs (server-side)
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
        - in: query
          name: cursor
          schema: { type: string, format: date-time, nullable: true }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Job' }
                  count:
                    type: integer
                  nextCursor:
                    type: string
                    format: date-time
                    nullable: true
                  ts:
                    type: string
                    format: date-time
              example:
                items:
                  - id: 11111111-1111-1111-1111-111111111111
                    type: browser.run
                    status: failed
                    executor_id: verify-demo
                    created_at: '2025-08-09T12:21:54.511721+00:00'
                count: 1
                nextCursor: null
                ts: '2025-08-09T12:29:46.655Z'

  /functions/v1/workers-active:
    get:
      summary: Active workers (server-side)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                  ts:
                    type: string
                    format: date-time

  /functions/v1/artifacts-list:
    get:
      summary: List artifacts for a job
      parameters:
        - in: query
          name: jobId
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/ArtifactRow' }
                  count:
                    type: integer
              example:
                items:
                  - id: e8699489-97ad-4941-9d66-3b264a2dd1dd
                    job_id: 962b5309-c23e-47ff-9612-4e642d48828d
                    name: screenshot.png
                    size: 1024
                    url: https://supabase.com/logo.png
                    created_at: '2025-08-09T10:19:28.963255+00:00'
                count: 1

  /functions/v1/sign-artifact:
    get:
      summary: Create a presigned URL for a storage object
      parameters:
        - in: query
          name: bucket
          required: true
          schema: { type: string, example: artifacts }
        - in: query
          name: path
          required: true
          schema: { type: string, example: verify/2025-08-09/<uuid>/hello.txt }
        - in: query
          name: expires
          schema: { type: integer, default: 3600 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string, format: uri }
                  bucket: { type: string }
                  path: { type: string }
                  expires: { type: integer }
              example:
                url: https://{projectRef}.supabase.co/storage/v1/object/sign/artifacts/verify/2025-08-09/<uuid>/hello.txt?token=...
                bucket: artifacts
                path: verify/2025-08-09/<uuid>/hello.txt
                expires: 3600
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
              example: { error: 'StorageApiError: Object not found' }

  /functions/v1/dlq-list:
    get:
      summary: List DLQ items
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/DLQItem' }
                  count: { type: integer }
                  ts: { type: string, format: date-time }

  /functions/v1/dlq-retry:
    post:
      summary: Retry a DLQ item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ dlqId ]
              properties:
                dlqId: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId: { type: string, format: uuid }

  /functions/v1/orchestrator-chat:
    post:
      summary: Orchestrator chat ingress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenant:
                  type: string
                  example: default
                intent:
                  type: string
                  example: chat
                payload:
                  type: object
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  id:
                    type: string
    get:
      summary: Health check
      responses:
        '200':
          description: OK

  /functions/v1/figma-context/healthz:
    get:
      summary: Health check for figma-context
      responses:
        '200': { description: OK }

  /functions/v1/figma-context/start:
    post:
      summary: Start a figma-context job
      description: Creates a job row and returns the first cursor. Requires Bearer auth + apikey.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FigmaStartRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  job_id: { type: string }
                  first_cursor: { type: integer }
                  persist: { type: string, enum: [db, mem] }
        '400': { description: Bad request }
        '401': { description: Unauthorized }

  /functions/v1/figma-context/stream:
    post:
      summary: Stream figma-context chunk (SSE)
      description: | 
        Processes one chunk per call and streams events via SSE. Use cursor to iterate 0..N-1.
        Events: ready, keepalive, page.ready, page.includes (once), page.chunk (per chunk), progress, debug, done, error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FigmaStreamRequest'
      responses:
        '200':
          description: SSE started
          content:
            text/event-stream:
              schema: { type: string }
              example: |
                event: ready\n
                event: page.ready\n
                event: page.includes\n
                event: page.chunk\n
                event: progress\n
                event: done\n
        '400': { description: Bad request }
        '401': { description: Unauthorized }

  /functions/v1/figma-context/status:
    get:
      summary: Get job status
      parameters:
        - in: query
          name: job_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FigmaStatusResponse'
        '401': { description: Unauthorized }

  /functions/v1/figma-context/cancel:
    post:
      summary: Cancel a job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ job_id ]
              properties:
                job_id: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { type: object, properties: { ok: { type: boolean } } }
        '401': { description: Unauthorized }
        '404': { description: Not found }

  /functions/v1/figma-context/apply:
    post:
      summary: Enqueue persistence (apply to DB)
      description: Emits bus_event figma_apply_requested with composed page JSON for downstream workers to upsert into pages/components.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ job_id, page ]
              properties:
                job_id: { type: string }
                page:
                  type: object
                  description: Composed page JSON including components
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  trace_id: { type: string }
        '401': { description: Unauthorized }
        '400': { description: Bad request }
        '500': { description: Internal error }

  /functions/v1/rag/healthz:
    get:
      summary: RAG health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }

  /functions/v1/rag/search:
    post:
      summary: RAG search (vector or fallback)
      description: Generate query embedding and search similar documents; may fallback to LIKE when vectors unavailable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query: { type: string }
                top_k: { type: integer, default: 5 }
                threshold: { type: number, default: 0.7 }
                return_query_vector: { type: boolean, default: false }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string }
                        content: { type: string }
                        metadata: { type: object }
                        similarity: { type: number, nullable: true }

  /functions/v1/rag/ingest/start:
    post:
      summary: Start RAG ingest job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source: { type: string }
                idempotency_key: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  job_id: { type: string }

  /functions/v1/rag/ingest/stream:
    post:
      summary: RAG ingest stream (SSE frames)
      description: Accept items and stream progress via SSE frames (ready, chunk_done, progress, done)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id: { type: string }
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      id: { type: string }
                      text: { type: string }
                      metadata: { type: object }
      responses:
        '200':
          description: text/event-stream
          content:
            text/event-stream:
              schema:
                type: string

  /functions/v1/rag/ingest/status:
    get:
      summary: Get RAG ingest status
      parameters:
        - in: query
          name: job_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  status: { type: string }

  /functions/v1/rag/ingest/cancel:
    post:
      summary: Cancel RAG ingest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: apikey
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResearchEnqueueRequest:
      type: object
      properties:
        payload: { type: object, additionalProperties: true }
        idempotency_key: { type: string }
        trace_id: { type: string }
        executor_id: { type: string, description: Optional executor routing key, default: researcher }
    ChatRequest:
      type: object
      required: [ session_id, content ]
      properties:
        session_id: { type: string }
        content: { type: string }
        request_id: { type: string, nullable: true }
        idempotency_key: { type: string, nullable: true }
        model: { type: string, nullable: true }

    EmbedItem:
      type: object
      required: [ id, text ]
      properties:
        id: { type: string }
        text: { type: string }

    EmbedRequest:
      type: object
      required: [ session_id, items ]
      properties:
        session_id: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/EmbedItem' }
        model: { type: string, nullable: true }
        job_id: { type: string, nullable: true }
    RunRequest:
      type: object
      required: [ serviceKey, projectId ]
      properties:
        serviceKey:
          type: string
          enum: [ variables_derive, symbols_map, bdd_generate, bdd_refine, actionflow_refine ]
        projectId: { type: string }
        cogoProjectId: { type: string }
        idempotencyKey: { type: string, description: Optional duplicate-prevention key }
        params:
          oneOf:
            - $ref: '#/components/schemas/RunParamsVariablesDerive'
            - $ref: '#/components/schemas/RunParamsSymbolsMap'
            - $ref: '#/components/schemas/RunParamsBddGenerate'
            - $ref: '#/components/schemas/RunParamsBddRefine'
            - $ref: '#/components/schemas/RunParamsActionflowRefine'
          discriminator:
            propertyName: serviceKey
    RunParamsVariablesDerive:
      type: object
      required: [ page_id ]
      properties:
        page_id: { type: integer }
        page_name: { type: string }
        cogo_ui_json: { type: object }
    RunParamsSymbolsMap:
      type: object
      required: [ page_id ]
      properties:
        page_id: { type: integer }
        variables: { type: object }
        cogo_ui_json: { type: object }
    RunParamsBddGenerate:
      type: object
      properties:
        cogo_ui_json: { type: object }
    RunParamsBddRefine:
      type: object
      required: [ current_bdd ]
      properties:
        current_bdd: { type: string }
        refinement_queries: { type: array, items: { type: string } }
    RunParamsActionflowRefine:
      type: object
      required: [ flow_id, current_flow ]
      properties:
        flow_id: { type: string }
        current_flow: { type: object }
        refinement_queries: { type: array, items: { type: string } }
    Job:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string }
        status: { type: string }
        executor_id: { type: string }
        worker_id: { type: string, nullable: true }
        payload: { type: object, additionalProperties: true }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time, nullable: true }
    ArtifactRow:
      type: object
      properties:
        id: { type: string, format: uuid }
        job_id: { type: string, format: uuid }
        name: { type: string }
        mime: { type: string, nullable: true }
        size: { type: integer, nullable: true }
        sha256: { type: string, nullable: true }
        url: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
    DLQItem:
      type: object
      properties:
        id: { type: integer }
        job_id: { type: string, format: uuid }
        reason: { type: string }
        error: { type: object, additionalProperties: true, nullable: true }
        payload: { type: object, additionalProperties: true, nullable: true }
        created_at: { type: string, format: date-time }
        retries: { type: integer }
        retried_at: { type: string, format: date-time, nullable: true }
    Error:
      type: object
      properties:
        error: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }

    FigmaStartRequest:
      type: object
      required: [ figma_url ]
      properties:
        figma_url: { type: string, format: uri }
        job_id: { type: string, description: Optional client-provided job id }

    FigmaStreamRequest:
      type: object
      required: [ job_id, cursor ]
      properties:
        job_id: { type: string }
        cursor: { type: integer, minimum: 0 }
        figma_url: { type: string, format: uri, nullable: true }
        max_nodes_per_chunk: { type: integer, minimum: 1, description: Development/testing override for chunk size }
        dev_enable_synthetic: { type: boolean, description: If true and no frames found, synthesize chunks }
        dev_total_nodes: { type: integer, minimum: 0, description: Node count for synthetic mode }

    FigmaStatusResponse:
      type: object
      properties:
        ok: { type: boolean }
        persist: { type: string, enum: [db, mem] }
        id: { type: string }
        figma_url: { type: string }
        total_chunks: { type: integer }
        done_chunks: { type: integer }
        last_cursor: { type: integer }
        status: { type: string, enum: [started, canceled, done] }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }

